Git rebase is a powerful command used to integrate changes from one branch into another by applying each commit from the source branch onto the target branch. Unlike git merge, which creates a new commit that combines changes from two branches, git rebase rewrites the commit history, resulting in a linear sequence of commits.


Exactly, that's correct. When you have a conflict during a rebase, it means that changes in the same portion of the same file in both branches (feature_branch and master in this case) cannot be automatically merged by Git because they are conflicting.

The conflict arises because the changes made in the myfile.txt file in the feature_branch are incompatible with the changes made in the same file in the master branch. Git doesn't know which changes to keep, so it asks you to manually resolve the conflict.

----------------------------
Merging in Git combines changes from different branches. Unlike rebase, which creates a linear history, merge preserves the commit history of both branches.

----------------------------
merge- all the commits from feature branch will be added along with a merge commit
rebase - same as above but doesnt create merge commit
squash - all commits in feature branch will be condensed into a single merge commit
----------------------------


git remote set-url origin git@github.com:Charanst/notes.git
change the remote repo from https to ssh
----------------------------
The git reset command in Git is used to reset the state of the current branch to a specific commit. It's a powerful command that can be used to undo changes, move the branch pointer, or unstage changes, depending on the options and arguments provided.
--------------------------------------------------------
The git revert command in Git is used to create a new commit that undoes the changes made in a previous commit. It's a safe way to revert changes without altering the existing commit history.
--------------------------------------------------------
git reset will remove the commit history.
whereas, the revert will have the history by creating a new commit.
----------------------------
----------------------------
----------------------------
----------------------------
