Git rebase is a powerful command used to integrate changes from one branch into another by applying each commit from the source branch onto the target branch. Unlike git merge, which creates a new commit that combines changes from two branches, git rebase rewrites the commit history, resulting in a linear sequence of commits.


Exactly, that's correct. When you have a conflict during a rebase, it means that changes in the same portion of the same file in both branches (feature_branch and master in this case) cannot be automatically merged by Git because they are conflicting.

The conflict arises because the changes made in the myfile.txt file in the feature_branch are incompatible with the changes made in the same file in the master branch. Git doesn't know which changes to keep, so it asks you to manually resolve the conflict.

----------------------------
Merging in Git combines changes from different branches. Unlike rebase, which creates a linear history, merge preserves the commit history of both branches.

----------------------------
merge- all the commits from feature branch will be added along with a merge commit
rebase - same as above but doesnt create merge commit
squash - all commits in feature branch will be condensed into a single merge commit
----------------------------


git remote set-url origin git@github.com:Charanst/notes.git
change the remote repo from https to ssh
----------------------------
The git reset command in Git is used to reset the state of the current branch to a specific commit. It's a powerful command that can be used to undo changes, move the branch pointer, or unstage changes, depending on the options and arguments provided.
--------------------------------------------------------
The git revert command in Git is used to create a new commit that undoes the changes made in a previous commit. It's a safe way to revert changes without altering the existing commit history.
--------------------------------------------------------
git reset will remove the commit history.
whereas, the revert will have the history by creating a new commit.
----------------------------
so with hard the files are deleted where as soft, only commit history is deleted but the files remain the file system
ChatGPT
Yes, that's a correct understanding.

--hard Reset:

Effect: Resets the branch pointer to the specified commit, and both the staging area (index) and the working directory are modified to match that commit. It discards all changes introduced after the specified commit.
Files: The changes in the working directory are discarded, and the files are reverted to the state of the specified commit. Any uncommitted changes are lost.
--soft Reset:

Effect: Moves the branch pointer to the specified commit but does not modify the staging area or the working directory. It leaves your changes in both the staging area and the working directory.
Files: The files in the working directory remain as they were. You can make additional modifications, and the changes introduced in the specified commit are staged for the next commit.
----------------------------
The git stash command in Git is used to temporarily save changes that are not ready to be committed or that you want to set aside for a while. It's a way to store your changes in a "stash" and revert your working directory to a clean state.

Effect: Takes your local changes in the working directory and saves them on a new stash.
Use Case: Useful when you need to switch branches, work on something else, or clean your working directory without committing changes.

Example Scenario:
Suppose you have changes in your working directory, but you want to switch to a different branch without committing those changes:

bash
Copy code
# Save changes to stash
git stash

# Switch to a different branch
git checkout another_branch

# Do some work on the other branch

# Switch back to your original branch
git checkout original_branch

# Apply the changes from stash
git stash apply

# Optionally, drop the stash
git stash drop


The git stash drop command is used to remove (or drop) a stash. If you want to remove a specific stash from the stash list, you use this command.
----------------------------
----------------------------
